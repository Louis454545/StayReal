# shoutout to <https://github.com/SpikeHD/Dorion/blob/main/.github/workflows/build.yml>
# for the desktop build workflow.

name: 'Build Desktop and Mobile'

on:
  push:
    branches:
      - 'main'

jobs:
  build-desktop:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            target: 'aarch64-apple-darwin'
          - platform: 'macos-latest'
            target: 'x86_64-apple-darwin'
            
          - platform: ubuntu-22.04
            target: 'x86_64-unknown-linux-gnu'
          - platform: ubuntu-22.04
            target: 'aarch64-unknown-linux-gnu'
          - platform: ubuntu-22.04
            target: 'armv7-unknown-linux-gnueabihf'

          - platform: 'windows-latest'
            target: 'x86_64-pc-windows-msvc'
          - platform: 'windows-latest'
            target: 'aarch64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      
      - name: (Linux) ARM sources.list
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          # Add [arch=amd64] to the initial entries of the sources.list
          sudo sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list
  
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs) multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-updates multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-security main restricted" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-security universe" | sudo tee -a /etc/apt/sources.list
          echo "deb [arch=armhf,arm64] http://ports.ubuntu.com/ubuntu-ports/ $(lsb_release -cs)-security multiverse" | sudo tee -a /etc/apt/sources.list
  
      - name: (Linux) ARM setup
        if: matrix.target == 'aarch64-unknown-linux-gnu' || matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo dpkg --add-architecture arm64
          sudo dpkg --add-architecture armhf
          sudo apt-get update

      - name: (Linux) install dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: (Linux) (ARMv7) install dependencies
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: |
          sudo apt-get install -y \
            libc6:armhf \
            libc6-dev:armhf \
            libapparmor1:armhf \
            libwebkit2gtk-4.1-dev:armhf \
            libssl-dev:armhf \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf
    
      - name: (Linux) (ARM64) install dependencies
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get install -y \
            libc6:arm64 \
            libc6-dev:arm64 \
            libapparmor1:arm64 \
            libwebkit2gtk-4.1-dev:arm64 \
            libssl-dev:arm64 \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu

      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: install frontend dependencies
        run: |
          pnpm install
          cd internal-api
          pnpm install
          pnpm build

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri -> target
            internal-api -> target
          prefix-key: rust-${{ hashFiles('**/Cargo.lock') }}
          shared-key: ${{ matrix.platform }}-${{ matrix.target }}
        
      - name: build
        if: matrix.platform != 'ubuntu-22.04'
        # if we are compiling for Windows ARM, we can only support NSIS
        run: pnpm tauri build --target ${{ matrix.target }} ${{ matrix.target == 'aarch64-pc-windows-msvc' && '--bundles nsis' || '' }}
        env:
          RUSTFLAGS: -Awarnings

      - name: (Linux) (x86_64) build
        if: matrix.target == 'x86_64-unknown-linux-gnu'
        run: pnpm tauri build --target ${{ matrix.target }} --bundles deb,rpm,appimage -- --config target.x86_64-unknown-linux-gnu.linker=\'x86_64-linux-gnu-gcc\'
        env:
          RUSTFLAGS: -Awarnings

      - name: (Linux) (ARMv7) build
        if: matrix.target == 'armv7-unknown-linux-gnueabihf'
        run: pnpm tauri build --target ${{ matrix.target }} --bundles deb,rpm -- --config target.armv7-unknown-linux-gnueabihf.linker=\'arm-linux-gnueabihf-gcc\'
        env:
          RUSTFLAGS: -Awarnings -L/usr/lib/arm-linux-gnueabihf
          CC: arm-linux-gnueabihf-gcc
          PKG_CONFIG_SYSROOT_DIR: /usr/lib/arm-linux-gnueabihf
          PKG_CONFIG_PATH: /usr/lib/arm-linux-gnueabihf/pkgconfig
  
      - name: (Linux) (ARM64) build
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: pnpm tauri build --target ${{ matrix.target }} --bundles deb,rpm -- --config target.aarch64-unknown-linux-gnu.linker=\'aarch64-linux-gnu-gcc\'
        env:
          RUSTFLAGS: -Awarnings -L/usr/lib/aarch64-linux-gnu
          CC: aarch64-linux-gnu-gcc
          PKG_CONFIG_SYSROOT_DIR: /usr/lib/aarch64-linux-gnu
          PKG_CONFIG_PATH: /usr/lib/aarch64-linux-gnu/pkgconfig
      
      - name: (Windows) (only x86) distribute .msi
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: stayreal-${{ matrix.target }}-msi
          path: src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi

      - name: (Windows) distribute NSIS (.exe)
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: stayreal-${{ matrix.target }}-nsis
          path: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

      - name: (Linux) distribute .deb
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: stayreal-${{ matrix.target }}-deb
          path: src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb

      - name: (Linux) distribute .rpm
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: stayreal-${{ matrix.target }}-rpm
          path: src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm

      - name: (Linux) distribute .appimage
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-artifact@v4
        with:
          name: stayreal-${{ matrix.target }}-appimage
          path: src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
        
      - name: (macOS) distribute .dmg
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: stayreal-${{ matrix.target }}-dmg
          path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

  build-mobile:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: ubuntu-22.04
            os: android
            target-full: 'aarch64-linux-android'
            target-short: 'aarch64'
          - platform: ubuntu-22.04
            os: android
            target-full: 'armv7-linux-androideabi'
            target-short: 'armv7'
          - platform: ubuntu-22.04
            os: android
            target-full: 'i686-linux-android'
            target-short: 'i686'
          - platform: ubuntu-22.04
            os: android
            target-full: 'x86_64-linux-android'
            target-short: 'x86_64'
          # - platform: 'macos-latest'
          #   os: 'ios'
          #   target-full: 'aarch64-apple-ios'
          #   target-short: 'aarch64'
          # - platform: 'macos-latest'
          #   os: 'ios'
          #   target-full: 'aarch64-apple-ios-sim'
          #   target-short: 'aarch64-sim'
          # - platform: 'macos-latest'
          #   os: 'ios'
          #   target-full: 'x86_64-apple-ios'
          #   target-short: 'x86_64'
        
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        
      - uses: pnpm/action-setup@v4
        with:
          version: latest

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'pnpm'

      - name: install frontend dependencies
        run: |
          pnpm install
          cd internal-api
          pnpm install
          pnpm build

      - name: (Android) install Java
        if: matrix.os == 'android'
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - if: matrix.os == 'android'
        uses: android-actions/setup-android@v3

      - name: (Android) install NDK
        if: matrix.os == 'android'
        run: |
          echo "y" | sdkmanager --install "ndk;25.2.9519653"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: (Android) setup signing
        if: matrix.os == 'android'
        run: |
          cd src-tauri/gen/android
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" > keystore.properties
          echo "password=${{ secrets.ANDROID_KEY_PASSWORD }}" >> keystore.properties
          base64 -d <<< "${{ secrets.ANDROID_KEY_BASE64 }}" > $RUNNER_TEMP/keystore.jks
          echo "storeFile=$RUNNER_TEMP/keystore.jks" >> keystore.properties

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target-full }}

      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri -> target
            internal-api -> target
          prefix-key: rust-${{ hashFiles('**/Cargo.lock') }}
          shared-key: ${{ matrix.platform }}-${{ matrix.target-full }}

      # - name: (iOS) install dependencies
      #   if: matrix.os == 'ios'
      #   run: |
      #     rustup target add aarch64-apple-ios aarch64-apple-ios-sim x86_64-apple-ios
      #     xcode-select --install || true

      # - name: Install the Apple certificate and provisioning profile
      #   if: matrix.os == 'ios'
      #   env:
      #     BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE }}
      #     P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
      #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

      #     # import certificate and provisioning profile from secrets
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
      #     echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: (Android) install dependencies
        if: matrix.os == 'android'
        run: |
          cargo install cargo-ndk

      - name: (Android) build
        if: matrix.os == 'android'
        env:
          NDK_HOME: ${{ env.NDK_HOME }}
        run: |
          pnpm tauri android build --target ${{ matrix.target-short }} --apk
          
      # - name: (iOS) build
      #   if: matrix.os == 'ios'
      #   env:
      #     TEAM_ID: ${{ secrets.TEAM_ID }}
      #   run: |
      #     # Update the Xcode project with the team ID
      #     /usr/libexec/PlistBuddy -c "Set :TEAM_ID $TEAM_ID" src-tauri/gen/apple/stayreal.xcodeproj/project.pbxproj
      #     pnpm tauri ios build
        
      - name: (Android) distribute (signed) .apk
        if: matrix.os == 'android'
        uses: actions/upload-artifact@v4
        with:
          name: stayreal-android-${{ matrix.target-short }}-apk
          path: |
            src-tauri/gen/android/app/build/outputs/apk/universal/release/*.apk
          
      # - name: (iOS) distribute .ipa
      #   if: matrix.target == 'ios'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: stayreal-ios-${{ matrix.target-short }}-ipa
      #     path: |
      #       src-tauri/gen/ios/build/*.ipa
