# StayReal. Continuous Integration, created by @yannouuuu, maintained by its contributors
name: 'StayReal. | Build Desktop and Mobile package'

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
jobs:
  build-desktop:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Install dependencies
        run: pnpm install

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: pnpm install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: ${{ matrix.args }}
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: StayReal-${{ matrix.platform }}
          path: |
            src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/x86_64-apple-darwin/release/bundle/macos/*.app

            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/aarch64-apple-darwin/release/bundle/macos/*.app

            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
            src-tauri/target/release/bundle/appimage/*.AppImage

            src-tauri/target/release/bundle/msi/*.msi
            src-tauri/target/release/bundle/nsis/*.exe
          if-no-files-found: ignore

  build-mobile:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            target: 'android'
          # - platform: 'macos-latest'
          #   target: 'ios'
        
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
        
      - name: Install pnpm
        run: |
          corepack enable
          corepack prepare pnpm@latest --activate

      - name: Setup Java
        if: matrix.target == 'android'
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK & NDK
        if: matrix.target == 'android'
        uses: android-actions/setup-android@v3

      - name: Install Android NDK
        if: matrix.target == 'android'
        run: |
          echo "y" | sdkmanager --install "ndk;25.2.9519653"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      # - name: Install iOS dependencies
      #   if: matrix.target == 'ios'
      #   run: |
      #     rustup target add aarch64-apple-ios aarch64-apple-ios-sim x86_64-apple-ios
      #     xcode-select --install || true

      # - name: Install the Apple certificate and provisioning profile
      #   if: matrix.target == 'ios'
      #   env:
      #     BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE }}
      #     P12_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
      #     BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      #   run: |
      #     # create variables
      #     CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
      #     PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
      #     KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

      #     # import certificate and provisioning profile from secrets
      #     echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
      #     echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

      #     # create temporary keychain
      #     security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      #     security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
      #     security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      #     # import certificate to keychain
      #     security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
      #     security list-keychain -d user -s $KEYCHAIN_PATH

      #     # apply provisioning profile
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: Install Android dependencies
        if: matrix.target == 'android'
        run: |
          rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
          cargo install cargo-ndk
          
      - name: Install dependencies
        run: pnpm install

      - name: Build Android App
        if: matrix.target == 'android'
        env:
          NDK_HOME: ${{ env.NDK_HOME }}
        run: |
          pnpm tauri android init
          pnpm tauri android build
          
      # - name: Build iOS App
      #   if: matrix.target == 'ios'
      #   env:
      #     TEAM_ID: ${{ secrets.TEAM_ID }}
      #   run: |
      #     # Update the Xcode project with the team ID
      #     /usr/libexec/PlistBuddy -c "Set :TEAM_ID $TEAM_ID" src-tauri/gen/apple/stayreal.xcodeproj/project.pbxproj
          
      #     pnpm tauri ios init
      #     pnpm tauri ios build
        
      - name: Upload Android artifacts
        if: matrix.target == 'android'
        uses: actions/upload-artifact@v3
        with:
          name: StayReal-Android
          path: |
            src-tauri/gen/android/app/build/outputs/apk/debug/*.apk
            src-tauri/gen/android/app/build/outputs/apk/release/*.apk
            src-tauri/gen/android/app/build/outputs/bundle/release/*.aab
          if-no-files-found: warn
        
      # - name: Upload iOS artifacts
      #   if: matrix.target == 'ios'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: StayReal-iOS
      #     path: |
      #       src-tauri/gen/ios/build/*.ipa
      #       src-tauri/gen/ios/build/*.app
      #     if-no-files-found: warn